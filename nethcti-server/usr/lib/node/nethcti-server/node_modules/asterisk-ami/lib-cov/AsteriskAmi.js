/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['AsteriskAmi.js']) {
  _$jscoverage['AsteriskAmi.js'] = [];
  _$jscoverage['AsteriskAmi.js'][1] = 0;
  _$jscoverage['AsteriskAmi.js'][2] = 0;
  _$jscoverage['AsteriskAmi.js'][3] = 0;
  _$jscoverage['AsteriskAmi.js'][4] = 0;
  _$jscoverage['AsteriskAmi.js'][5] = 0;
  _$jscoverage['AsteriskAmi.js'][6] = 0;
  _$jscoverage['AsteriskAmi.js'][7] = 0;
  _$jscoverage['AsteriskAmi.js'][9] = 0;
  _$jscoverage['AsteriskAmi.js'][11] = 0;
  _$jscoverage['AsteriskAmi.js'][12] = 0;
  _$jscoverage['AsteriskAmi.js'][14] = 0;
  _$jscoverage['AsteriskAmi.js'][16] = 0;
  _$jscoverage['AsteriskAmi.js'][17] = 0;
  _$jscoverage['AsteriskAmi.js'][18] = 0;
  _$jscoverage['AsteriskAmi.js'][19] = 0;
  _$jscoverage['AsteriskAmi.js'][20] = 0;
  _$jscoverage['AsteriskAmi.js'][21] = 0;
  _$jscoverage['AsteriskAmi.js'][22] = 0;
  _$jscoverage['AsteriskAmi.js'][23] = 0;
  _$jscoverage['AsteriskAmi.js'][24] = 0;
  _$jscoverage['AsteriskAmi.js'][25] = 0;
  _$jscoverage['AsteriskAmi.js'][26] = 0;
  _$jscoverage['AsteriskAmi.js'][29] = 0;
  _$jscoverage['AsteriskAmi.js'][31] = 0;
  _$jscoverage['AsteriskAmi.js'][33] = 0;
  _$jscoverage['AsteriskAmi.js'][34] = 0;
  _$jscoverage['AsteriskAmi.js'][36] = 0;
  _$jscoverage['AsteriskAmi.js'][38] = 0;
  _$jscoverage['AsteriskAmi.js'][39] = 0;
  _$jscoverage['AsteriskAmi.js'][40] = 0;
  _$jscoverage['AsteriskAmi.js'][42] = 0;
  _$jscoverage['AsteriskAmi.js'][44] = 0;
  _$jscoverage['AsteriskAmi.js'][46] = 0;
  _$jscoverage['AsteriskAmi.js'][47] = 0;
  _$jscoverage['AsteriskAmi.js'][48] = 0;
  _$jscoverage['AsteriskAmi.js'][51] = 0;
  _$jscoverage['AsteriskAmi.js'][52] = 0;
  _$jscoverage['AsteriskAmi.js'][55] = 0;
  _$jscoverage['AsteriskAmi.js'][56] = 0;
  _$jscoverage['AsteriskAmi.js'][59] = 0;
  _$jscoverage['AsteriskAmi.js'][60] = 0;
  _$jscoverage['AsteriskAmi.js'][65] = 0;
  _$jscoverage['AsteriskAmi.js'][66] = 0;
  _$jscoverage['AsteriskAmi.js'][67] = 0;
  _$jscoverage['AsteriskAmi.js'][73] = 0;
  _$jscoverage['AsteriskAmi.js'][77] = 0;
  _$jscoverage['AsteriskAmi.js'][78] = 0;
  _$jscoverage['AsteriskAmi.js'][79] = 0;
  _$jscoverage['AsteriskAmi.js'][83] = 0;
  _$jscoverage['AsteriskAmi.js'][84] = 0;
  _$jscoverage['AsteriskAmi.js'][87] = 0;
  _$jscoverage['AsteriskAmi.js'][88] = 0;
  _$jscoverage['AsteriskAmi.js'][90] = 0;
  _$jscoverage['AsteriskAmi.js'][93] = 0;
  _$jscoverage['AsteriskAmi.js'][94] = 0;
  _$jscoverage['AsteriskAmi.js'][97] = 0;
  _$jscoverage['AsteriskAmi.js'][98] = 0;
  _$jscoverage['AsteriskAmi.js'][101] = 0;
  _$jscoverage['AsteriskAmi.js'][102] = 0;
  _$jscoverage['AsteriskAmi.js'][103] = 0;
  _$jscoverage['AsteriskAmi.js'][104] = 0;
  _$jscoverage['AsteriskAmi.js'][105] = 0;
  _$jscoverage['AsteriskAmi.js'][106] = 0;
  _$jscoverage['AsteriskAmi.js'][108] = 0;
  _$jscoverage['AsteriskAmi.js'][109] = 0;
  _$jscoverage['AsteriskAmi.js'][110] = 0;
  _$jscoverage['AsteriskAmi.js'][116] = 0;
  _$jscoverage['AsteriskAmi.js'][117] = 0;
  _$jscoverage['AsteriskAmi.js'][118] = 0;
  _$jscoverage['AsteriskAmi.js'][119] = 0;
  _$jscoverage['AsteriskAmi.js'][127] = 0;
  _$jscoverage['AsteriskAmi.js'][128] = 0;
  _$jscoverage['AsteriskAmi.js'][131] = 0;
  _$jscoverage['AsteriskAmi.js'][132] = 0;
  _$jscoverage['AsteriskAmi.js'][133] = 0;
  _$jscoverage['AsteriskAmi.js'][134] = 0;
  _$jscoverage['AsteriskAmi.js'][136] = 0;
  _$jscoverage['AsteriskAmi.js'][141] = 0;
  _$jscoverage['AsteriskAmi.js'][142] = 0;
  _$jscoverage['AsteriskAmi.js'][143] = 0;
  _$jscoverage['AsteriskAmi.js'][144] = 0;
  _$jscoverage['AsteriskAmi.js'][146] = 0;
  _$jscoverage['AsteriskAmi.js'][149] = 0;
  _$jscoverage['AsteriskAmi.js'][151] = 0;
  _$jscoverage['AsteriskAmi.js'][152] = 0;
  _$jscoverage['AsteriskAmi.js'][155] = 0;
  _$jscoverage['AsteriskAmi.js'][156] = 0;
  _$jscoverage['AsteriskAmi.js'][158] = 0;
  _$jscoverage['AsteriskAmi.js'][159] = 0;
}
_$jscoverage['AsteriskAmi.js'][1]++;
var EventEmitter = require("events").EventEmitter;
_$jscoverage['AsteriskAmi.js'][2]++;
var net = require("net");
_$jscoverage['AsteriskAmi.js'][3]++;
var util = require("util");
_$jscoverage['AsteriskAmi.js'][4]++;
var carrier = require("carrier");
_$jscoverage['AsteriskAmi.js'][5]++;
var parse = require("./parse");
_$jscoverage['AsteriskAmi.js'][6]++;
var stringify = require("./stringify");
_$jscoverage['AsteriskAmi.js'][7]++;
var astUtils = require("./astUtils");
_$jscoverage['AsteriskAmi.js'][9]++;
var END = "\r\n\r\n";
_$jscoverage['AsteriskAmi.js'][11]++;
function AsteriskAmi(params) {
  _$jscoverage['AsteriskAmi.js'][12]++;
  params = params || {};
  _$jscoverage['AsteriskAmi.js'][14]++;
  this.connection = new EventEmitter();
  _$jscoverage['AsteriskAmi.js'][16]++;
  this.port = params.port || 5038;
  _$jscoverage['AsteriskAmi.js'][17]++;
  this.host = params.host || null;
  _$jscoverage['AsteriskAmi.js'][18]++;
  this.username = params.username || null;
  _$jscoverage['AsteriskAmi.js'][19]++;
  this.password = params.password || null;
  _$jscoverage['AsteriskAmi.js'][20]++;
  this.enableDebug = params.debug || false;
  _$jscoverage['AsteriskAmi.js'][21]++;
  this.reconnect = params.reconnect || false;
  _$jscoverage['AsteriskAmi.js'][22]++;
  this.events = (params && params.hasOwnProperty("events")? params.events: true);
  _$jscoverage['AsteriskAmi.js'][23]++;
  this.identifier = params.identifier || null;
  _$jscoverage['AsteriskAmi.js'][24]++;
  this.encoding = params.encoding || "ascii";
  _$jscoverage['AsteriskAmi.js'][25]++;
  this._version = null;
  _$jscoverage['AsteriskAmi.js'][26]++;
  this._callbacks = {};
}
_$jscoverage['AsteriskAmi.js'][29]++;
util.inherits(AsteriskAmi, EventEmitter);
_$jscoverage['AsteriskAmi.js'][31]++;
module.exports = AsteriskAmi;
_$jscoverage['AsteriskAmi.js'][33]++;
AsteriskAmi.prototype.connect = (function () {
  _$jscoverage['AsteriskAmi.js'][34]++;
  var self = this;
  _$jscoverage['AsteriskAmi.js'][36]++;
  self.debug("Running ami connect");
  _$jscoverage['AsteriskAmi.js'][38]++;
  self.connection = net.createConnection(this.port, this.host);
  _$jscoverage['AsteriskAmi.js'][39]++;
  self.connection.setEncoding(self.amiEncoding);
  _$jscoverage['AsteriskAmi.js'][40]++;
  self.connection.setKeepAlive(true, 500);
  _$jscoverage['AsteriskAmi.js'][42]++;
  carrier.carry(self.connection, (function carrierCb(rawEvent) {
  _$jscoverage['AsteriskAmi.js'][44]++;
  var event = parse.parse.call(self, rawEvent);
  _$jscoverage['AsteriskAmi.js'][46]++;
  if (event.actionid && self._callbacks[event.actionid] && self._callbacks[event.actionid] instanceof Function) {
    _$jscoverage['AsteriskAmi.js'][47]++;
    self._callbacks[event.actionid](null, event);
    _$jscoverage['AsteriskAmi.js'][48]++;
    delete self._callbacks[event.actionid];
  }
  _$jscoverage['AsteriskAmi.js'][51]++;
  if (event.response && event.message && /Authentication/i.test(event.message)) {
    _$jscoverage['AsteriskAmi.js'][52]++;
    self.emit("login", ((event.response != "Success")? new Error(event.response): null), event);
  }
  _$jscoverage['AsteriskAmi.js'][55]++;
  if (event.event && self.listeners(event.event.toLowerCase()).length) {
    _$jscoverage['AsteriskAmi.js'][56]++;
    self.emit(event.event.toLowerCase(), event);
  }
  _$jscoverage['AsteriskAmi.js'][59]++;
  if (self.listeners("data").length) {
    _$jscoverage['AsteriskAmi.js'][60]++;
    self.emit("data", event);
  }
}), self.amiEncoding, END);
  _$jscoverage['AsteriskAmi.js'][65]++;
  var getVersionFromDataAndLogin = (function getVersion(data) {
  _$jscoverage['AsteriskAmi.js'][66]++;
  if (parse.parseVersion.call(self, data)) {
    _$jscoverage['AsteriskAmi.js'][67]++;
    self.send({Action: "login", Username: self.username, Secret: self.password, Events: (self.events? "on": "off")});
    _$jscoverage['AsteriskAmi.js'][73]++;
    self.connection.removeListener("data", getVersionFromDataAndLogin);
  }
});
  _$jscoverage['AsteriskAmi.js'][77]++;
  self.connection.on("connect", (function connect() {
  _$jscoverage['AsteriskAmi.js'][78]++;
  self.debug("Connected to Asterisk AMI");
  _$jscoverage['AsteriskAmi.js'][79]++;
  self.emit("connection-connect");
})).on("data", getVersionFromDataAndLogin).on("drain", (function conDrain() {
  _$jscoverage['AsteriskAmi.js'][83]++;
  self.emit("connection-drain");
  _$jscoverage['AsteriskAmi.js'][84]++;
  self.debug("Asterisk Socket connection drained");
})).on("error", (function conError(error) {
  _$jscoverage['AsteriskAmi.js'][87]++;
  if (error) {
    _$jscoverage['AsteriskAmi.js'][88]++;
    self.debug("Asterisk Socket connection error, error was: " + error);
  }
  _$jscoverage['AsteriskAmi.js'][90]++;
  self.emit("connection-error", error);
})).on("timeout", (function conTimeout() {
  _$jscoverage['AsteriskAmi.js'][93]++;
  self.debug("Asterisk Socket connection has timed out");
  _$jscoverage['AsteriskAmi.js'][94]++;
  self.emit("connection-timeout");
})).on("end", (function contTimeout() {
  _$jscoverage['AsteriskAmi.js'][97]++;
  self.debug("Asterisk Socket connection ran end event");
  _$jscoverage['AsteriskAmi.js'][98]++;
  self.emit("connection-end");
})).on("close", (function conClose(hadError) {
  _$jscoverage['AsteriskAmi.js'][101]++;
  self.debug("Asterisk Socket connection closed, error status - " + hadError);
  _$jscoverage['AsteriskAmi.js'][102]++;
  self.emit("connection-close", hadError);
  _$jscoverage['AsteriskAmi.js'][103]++;
  if (self.reconnect && self.reconnect !== false) {
    _$jscoverage['AsteriskAmi.js'][104]++;
    var reconnectDelay = 3000;
    _$jscoverage['AsteriskAmi.js'][105]++;
    if (self.reconnect instanceof Number) {
      _$jscoverage['AsteriskAmi.js'][106]++;
      reconnectDelay = self.reconnect;
    }
    _$jscoverage['AsteriskAmi.js'][108]++;
    self.debug("Reconnecting to AMI in " + reconnectDelay);
    _$jscoverage['AsteriskAmi.js'][109]++;
    setTimeout((function timeoutCb() {
  _$jscoverage['AsteriskAmi.js'][110]++;
  self.connect();
}), reconnectDelay);
  }
}));
});
_$jscoverage['AsteriskAmi.js'][116]++;
AsteriskAmi.prototype.disconnect = (function () {
  _$jscoverage['AsteriskAmi.js'][117]++;
  var self = this;
  _$jscoverage['AsteriskAmi.js'][118]++;
  this.reconnect = false;
  _$jscoverage['AsteriskAmi.js'][119]++;
  this.connection.end(stringify.call(this, {Action: astUtils.logoutAction.call(self), ActionID: astUtils.generateRandomActionID.call(this)}));
});
_$jscoverage['AsteriskAmi.js'][127]++;
AsteriskAmi.prototype.destroy = (function () {
  _$jscoverage['AsteriskAmi.js'][128]++;
  this.connection.destroy();
});
_$jscoverage['AsteriskAmi.js'][131]++;
AsteriskAmi.prototype.debug = (function (data) {
  _$jscoverage['AsteriskAmi.js'][132]++;
  if (this.enableDebug !== false) {
    _$jscoverage['AsteriskAmi.js'][133]++;
    if (this.enableDebug instanceof Function) {
      _$jscoverage['AsteriskAmi.js'][134]++;
      this.enableDebug(data);
    }
    else {
      _$jscoverage['AsteriskAmi.js'][136]++;
      console.log(data);
    }
  }
});
_$jscoverage['AsteriskAmi.js'][141]++;
AsteriskAmi.prototype._send = (function (obj, cb) {
  _$jscoverage['AsteriskAmi.js'][142]++;
  this.debug(obj);
  _$jscoverage['AsteriskAmi.js'][143]++;
  if (cb && cb instanceof Function) {
    _$jscoverage['AsteriskAmi.js'][144]++;
    this._callbacks[obj.ActionID] = cb;
  }
  _$jscoverage['AsteriskAmi.js'][146]++;
  this.connection.write(stringify.call(this, obj), this.amiEncoding, cb);
});
_$jscoverage['AsteriskAmi.js'][149]++;
AsteriskAmi.prototype.send = (function (obj, cb) {
  _$jscoverage['AsteriskAmi.js'][151]++;
  if (! obj.ActionID) {
    _$jscoverage['AsteriskAmi.js'][152]++;
    obj.ActionID = astUtils.generateRandomActionID.call(this);
  }
  _$jscoverage['AsteriskAmi.js'][155]++;
  if (this.connection != null && this.connection.writable) {
    _$jscoverage['AsteriskAmi.js'][156]++;
    this._send(obj, cb);
  }
  else {
    _$jscoverage['AsteriskAmi.js'][158]++;
    this.debug("cannot write to Asterisk Socket");
    _$jscoverage['AsteriskAmi.js'][159]++;
    this.emit("connection-unwriteable");
  }
});
_$jscoverage['AsteriskAmi.js'].source = ["var EventEmitter = require('events').EventEmitter;","var net = require('net');","var util = require('util');","var carrier = require('carrier');","var parse = require('./parse');","var stringify = require('./stringify');","var astUtils = require('./astUtils');","","var END = '\\r\\n\\r\\n';","","function AsteriskAmi(params){","  params = params || {};","","  this.connection = new EventEmitter();","","  this.port = params.port || 5038;","  this.host = params.host || null;","  this.username = params.username || null;","  this.password = params.password || null;","  this.enableDebug = params.debug || false;","  this.reconnect = params.reconnect || false;","  this.events = (params &amp;&amp; params.hasOwnProperty('events') ? params.events : true);","  this.identifier = params.identifier || null;","  this.encoding = params.encoding || 'ascii';","  this._version = null;","  this._callbacks = {};","}","","util.inherits(AsteriskAmi, EventEmitter);","","module.exports = AsteriskAmi;","","AsteriskAmi.prototype.connect = function(){","  var self = this;","","  self.debug('Running ami connect');","","  self.connection = net.createConnection(this.port, this.host);","  self.connection.setEncoding(self.amiEncoding);","  self.connection.setKeepAlive(true, 500);","","  carrier.carry(self.connection, function carrierCb(rawEvent) {","","    var event = parse.parse.call(self, rawEvent);","","    if(event.actionid &amp;&amp; self._callbacks[event.actionid] &amp;&amp; self._callbacks[event.actionid] instanceof Function){","      self._callbacks[event.actionid](null, event);","      delete self._callbacks[event.actionid];","    }","","    if(event.response &amp;&amp; event.message &amp;&amp; /Authentication/i.test(event.message)){","      self.emit('login', ((event.response != 'Success') ? new Error(event.response) : null) , event);","    }","","    if(event.event &amp;&amp; self.listeners(event.event.toLowerCase()).length){","      self.emit(event.event.toLowerCase(), event);","    }","","    if(self.listeners('data').length){","      self.emit('data', event);","    }","","  }, self.amiEncoding, END);","","  var getVersionFromDataAndLogin = function getVersion(data){","    if(parse.parseVersion.call(self, data)){","      self.send({","        Action: 'login',","        Username : self.username,","        Secret : self.password,","        Events: (self.events ? 'on' : 'off')","      });","      self.connection.removeListener('data', getVersionFromDataAndLogin);","    }","  };","","  self.connection.on('connect', function connect(){","    self.debug('Connected to Asterisk AMI');","    self.emit('connection-connect');","  })","  .on('data', getVersionFromDataAndLogin)","  .on('drain', function conDrain(){","    self.emit('connection-drain');","    self.debug('Asterisk Socket connection drained');","  })","  .on('error', function conError(error){","    if(error){","      self.debug('Asterisk Socket connection error, error was: ' + error);","    }","    self.emit('connection-error', error);","  })","  .on('timeout',function conTimeout(){","    self.debug('Asterisk Socket connection has timed out');","    self.emit('connection-timeout');","  })","  .on('end', function contTimeout() {","    self.debug('Asterisk Socket connection ran end event');","    self.emit('connection-end');","  })","  .on('close', function conClose(hadError){","    self.debug('Asterisk Socket connection closed, error status - ' + hadError);","    self.emit('connection-close', hadError);","    if(self.reconnect &amp;&amp; self.reconnect !== false){","      var reconnectDelay = 3000;","      if(self.reconnect instanceof Number){","        reconnectDelay = self.reconnect;","      }","      self.debug('Reconnecting to AMI in ' + reconnectDelay);","      setTimeout(function timeoutCb() {","        self.connect();","      }, reconnectDelay);","    }","  });","};","","AsteriskAmi.prototype.disconnect = function(){","  var self = this;","  this.reconnect = false;//just in case we wanted it to reconnect before, we've asked for it to be closed this time so make sure it doesnt reconnect","  this.connection.end(","    stringify.call(this, {","      Action: astUtils.logoutAction.call(self),","      ActionID: astUtils.generateRandomActionID.call(this)","    })","  );","};","","AsteriskAmi.prototype.destroy = function(){","  this.connection.destroy();","};","","AsteriskAmi.prototype.debug = function(data){","  if( this.enableDebug !== false ){","    if( this.enableDebug instanceof Function ){","      this.enableDebug(data);","    }else{","      console.log(data);","    }","  }","};","","AsteriskAmi.prototype._send = function(obj, cb){","  this.debug(obj);","  if(cb &amp;&amp; cb instanceof Function){","    this._callbacks[obj.ActionID] = cb;","  }","  this.connection.write(stringify.call(this, obj), this.amiEncoding, cb);","};","","AsteriskAmi.prototype.send = function(obj, cb) {","  //check state of connection here, if not up then bail out","  if(!obj.ActionID){","    obj.ActionID = astUtils.generateRandomActionID.call(this);","  }","","  if(this.connection != null &amp;&amp; this.connection.writable){","    this._send(obj, cb);","  }else{","    this.debug('cannot write to Asterisk Socket');","    this.emit('connection-unwriteable');","  }","};"];
