/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['parse.js']) {
  _$jscoverage['parse.js'] = [];
  _$jscoverage['parse.js'][1] = 0;
  _$jscoverage['parse.js'][3] = 0;
  _$jscoverage['parse.js'][4] = 0;
  _$jscoverage['parse.js'][5] = 0;
  _$jscoverage['parse.js'][6] = 0;
  _$jscoverage['parse.js'][8] = 0;
  _$jscoverage['parse.js'][10] = 0;
  _$jscoverage['parse.js'][12] = 0;
  _$jscoverage['parse.js'][13] = 0;
  _$jscoverage['parse.js'][14] = 0;
  _$jscoverage['parse.js'][15] = 0;
  _$jscoverage['parse.js'][17] = 0;
  _$jscoverage['parse.js'][19] = 0;
  _$jscoverage['parse.js'][24] = 0;
  _$jscoverage['parse.js'][25] = 0;
  _$jscoverage['parse.js'][26] = 0;
  _$jscoverage['parse.js'][28] = 0;
  _$jscoverage['parse.js'][29] = 0;
  _$jscoverage['parse.js'][30] = 0;
  _$jscoverage['parse.js'][31] = 0;
  _$jscoverage['parse.js'][32] = 0;
  _$jscoverage['parse.js'][33] = 0;
  _$jscoverage['parse.js'][37] = 0;
  _$jscoverage['parse.js'][38] = 0;
  _$jscoverage['parse.js'][39] = 0;
  _$jscoverage['parse.js'][40] = 0;
  _$jscoverage['parse.js'][42] = 0;
  _$jscoverage['parse.js'][43] = 0;
  _$jscoverage['parse.js'][44] = 0;
  _$jscoverage['parse.js'][45] = 0;
  _$jscoverage['parse.js'][46] = 0;
  _$jscoverage['parse.js'][48] = 0;
  _$jscoverage['parse.js'][50] = 0;
  _$jscoverage['parse.js'][51] = 0;
  _$jscoverage['parse.js'][54] = 0;
  _$jscoverage['parse.js'][57] = 0;
  _$jscoverage['parse.js'][61] = 0;
  _$jscoverage['parse.js'][64] = 0;
}
_$jscoverage['parse.js'][1]++;
var CRLF = "\r\n";
_$jscoverage['parse.js'][3]++;
var extractEventInfo = (function (key, value, variableValues, event) {
  _$jscoverage['parse.js'][4]++;
  if (variableValues && variableValues[1]) {
    _$jscoverage['parse.js'][5]++;
    if (! event.hasOwnProperty(key)) {
      _$jscoverage['parse.js'][6]++;
      event[key] = {};
    }
    _$jscoverage['parse.js'][8]++;
    event[key][variableValues[1]] = variableValues[2] || null;
  }
  else {
    _$jscoverage['parse.js'][10]++;
    if (event.hasOwnProperty(key)) {
      _$jscoverage['parse.js'][12]++;
      if (! (event.key instanceof Object)) {
        _$jscoverage['parse.js'][13]++;
        var tmp = event[key];
        _$jscoverage['parse.js'][14]++;
        event[key] = {};
        _$jscoverage['parse.js'][15]++;
        event[key][Object.keys(event[key]).length] = tmp;
      }
      _$jscoverage['parse.js'][17]++;
      event[key][Object.keys(event[key]).length] = value;
    }
    else {
      _$jscoverage['parse.js'][19]++;
      event[key] = value;
    }
  }
});
_$jscoverage['parse.js'][24]++;
var versionRegexp = /^Asterisk Call Manager\/(\d\.\d)/;
_$jscoverage['parse.js'][25]++;
var lineRegexp = /^([A-Z0-9]+): ?(.+)?/i;
_$jscoverage['parse.js'][26]++;
var variableRegexp = /^(.+)=(.+)/;
_$jscoverage['parse.js'][28]++;
var parseVersion = (function (rawEvent) {
  _$jscoverage['parse.js'][29]++;
  var self = this;
  _$jscoverage['parse.js'][30]++;
  var version = versionRegexp.exec(rawEvent);
  _$jscoverage['parse.js'][31]++;
  if (version && version[1]) {
    _$jscoverage['parse.js'][32]++;
    self._version = version[1];
    _$jscoverage['parse.js'][33]++;
    return true;
  }
});
_$jscoverage['parse.js'][37]++;
var parse = (function (rawEvent) {
  _$jscoverage['parse.js'][38]++;
  var self = this;
  _$jscoverage['parse.js'][39]++;
  var event = {};
  _$jscoverage['parse.js'][40]++;
  var result = rawEvent.split(CRLF);
  _$jscoverage['parse.js'][42]++;
  result.forEach((function (line) {
  _$jscoverage['parse.js'][43]++;
  var detail = lineRegexp.exec(line);
  _$jscoverage['parse.js'][44]++;
  if (detail && detail[1]) {
    _$jscoverage['parse.js'][45]++;
    var key = detail[1].toLowerCase();
    _$jscoverage['parse.js'][46]++;
    var value = detail[2] || null;
    _$jscoverage['parse.js'][48]++;
    var variableValues;
    _$jscoverage['parse.js'][50]++;
    if (key === "variable") {
      _$jscoverage['parse.js'][51]++;
      variableValues = variableRegexp.exec(value);
    }
    _$jscoverage['parse.js'][54]++;
    extractEventInfo(key, value, variableValues, event);
  }
  else {
    _$jscoverage['parse.js'][57]++;
    self.debug("No match on", JSON.stringify(line));
  }
}));
  _$jscoverage['parse.js'][61]++;
  return event;
});
_$jscoverage['parse.js'][64]++;
module.exports = {parse: parse, parseVersion: parseVersion};
_$jscoverage['parse.js'].source = ["var CRLF = '\\r\\n';","","var extractEventInfo = function(key, value, variableValues, event){","  if(variableValues &amp;&amp; variableValues[1]){","    if(!event.hasOwnProperty(key)){","      event[key] = {};","    }","    event[key][variableValues[1]] = variableValues[2] || null;","  }else{","    if(event.hasOwnProperty(key)){","      //then make this into an object as one already exists","      if(!( event.key instanceof Object)){","        var tmp = event[key];","        event[key] = {};","        event[key][Object.keys(event[key]).length] = tmp;","      }","      event[key][Object.keys(event[key]).length] = value;","    }else{","      event[key] = value;","    }","  }","};","","var versionRegexp = /^Asterisk Call Manager\\/(\\d\\.\\d)/;","var lineRegexp = /^([A-Z0-9]+): ?(.+)?/i;","var variableRegexp = /^(.+)=(.+)/;","","var parseVersion = function(rawEvent){","  var self = this;","  var version = versionRegexp.exec(rawEvent);","  if(version &amp;&amp; version[1]){","    self._version = version[1];","    return true;","  }","};","","var parse = function(rawEvent){","  var self = this;","  var event = {};","  var result = rawEvent.split(CRLF);","","  result.forEach(function(line){","    var detail = lineRegexp.exec(line);","    if(detail &amp;&amp; detail[1]){","      var key = detail[1].toLowerCase();","      var value = detail[2] || null;","","      var variableValues;","","      if(key === 'variable'){","        variableValues = variableRegexp.exec(value);","      }","","      extractEventInfo(key, value, variableValues, event);","","    }else{","      self.debug('No match on', JSON.stringify(line));","    }","  });","","  return event;","};","","module.exports = {","  parse: parse,","  parseVersion: parseVersion","};"];
